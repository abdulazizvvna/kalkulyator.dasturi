# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1taaPlnz5SlFTONIoORiLzbKpcZsuaHER
"""

# --- Colab uchun murakkab kalkulyator ---
import math, cmath, operator, ast

# --- ruxsat etilgan amallar ---
_binops = {
    ast.Add: operator.add,
    ast.Sub: operator.sub,
    ast.Mult: operator.mul,
    ast.Div: operator.truediv,
    ast.Mod: operator.mod,
    ast.Pow: operator.pow
}
_unops = {ast.UAdd: operator.pos, ast.USub: operator.neg}

# --- funksiyalar va konstantalar ---
funcs = {
    # Trigonometrik
    "sin": math.sin, "cos": math.cos, "tan": math.tan,
    "asin": math.asin, "acos": math.acos, "atan": math.atan,
    # Giperbolik
    "sinh": math.sinh, "cosh": math.cosh, "tanh": math.tanh,
    # Logarifm va eksponensial
    "log": math.log, "log10": math.log10, "exp": math.exp,
    # Boshqalar
    "sqrt": math.sqrt, "abs": abs, "round": round,
    "re": lambda z: z.real, "im": lambda z: z.imag,
    # Kompleks uchun
    "cis": lambda x: cmath.exp(1j * x)
}
consts = {"pi": math.pi, "e": math.e, "tau": math.tau, "i": 1j, "j": 1j}

# --- ifodani xavfsiz baholash funksiyasi ---
def safe_eval(expr, vars_={}):
    node = ast.parse(expr, mode='eval').body

    def _eval(n):
        if isinstance(n, ast.Constant):  # sonlar
            return n.value
        if isinstance(n, ast.Name):  # o'zgaruvchi yoki konstanta
            if n.id in vars_:
                return vars_[n.id]
            if n.id in consts:
                return consts[n.id]
            raise ValueError(f"Noma'lum o'zgaruvchi: {n.id}")
        if isinstance(n, ast.BinOp):  # 2 operandli amal
            if type(n.op) in _binops:
                return _binops[type(n.op)](_eval(n.left), _eval(n.right))
        if isinstance(n, ast.UnaryOp):  # - yoki + oldidagi amal
            if type(n.op) in _unops:
                return _unops[type(n.op)](_eval(n.operand))
        if isinstance(n, ast.Call):  # funksiya chaqiruvi
            if isinstance(n.func, ast.Name) and n.func.id in funcs:
                f = funcs[n.func.id]
                args = [_eval(a) for a in n.args]
                return f(*args)
        raise ValueError("Noto'g'ri ifoda!")
    return _eval(node)

# --- Colab interaktiv qismi ---
def murakkab_kalkulyator():
    print("Murakkab kalkulyator ishga tushdi! (chiqish uchun 'exit' yozing)")
    print("Misollar: sin(pi/2), (3+4j)*2, sqrt(16), log(e), 2**3, 3+4*2")

    vars_ = {}
    while True:
        s = input(">> ")
        if s.lower() in ["exit", "quit"]:
            print("Chiqildi.")
            break
        try:
            if "=" in s:  # o'zgaruvchini saqlash
                name, expr = s.split("=", 1)
                name = name.strip()
                value = safe_eval(expr.strip(), vars_)
                vars_[name] = value
                print(f"{name} = {value}")
            else:
                res = safe_eval(s, vars_)
                print("Natija:", res)
        except Exception as e:
            print("Xato:", e)

# --- ishga tushurish ---
murakkab_kalkulyator()

